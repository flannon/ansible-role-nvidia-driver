---
# We have to do this because the CentOS mirrors don't keep kernel-headers, etc
# for older kernels.
- name: ensure we have kernel-headers installed for the current kernel
  block:
    - name: attempt to install kernel support packages for current version
      dnf:
        name:
          - "kernel-headers={{ ansible_kernel }}"
          - "kernel-tools={{ ansible_kernel }}"
          - "kernel-tools-libs={{ ansible_kernel }}"
          - "kernel-devel={{ ansible_kernel }}"
          - "kernel-debug-devel={{ ansible_kernel }}"
        state: present
      environment: "{{proxy_env if proxy_env is defined else {}}}"
  rescue:
    - name: update the kernel to latest version so we have a supported version
      dnf:
        name:
          - "kernel"
          - "kernel-headers"
          - "kernel-tools"
          - "kernel-tools-libs"
          - "kernel-devel"
          - "kernel-debug-devel"
        state: latest
      environment: "{{proxy_env if proxy_env is defined else {}}}"
      
    #- name: reboot to pick up the new kernel
    #  reboot:
#
#- name: wait for the reboot
#  pause:
#    seconds: 30
    
    #- name: add epel repo
    #  yum_repository:
    #name: epel
    #description: EPEL YUM repo
    #baseurl: "{{ nvidia_driver_rhel_epel_repo_baseurl }}"
    #gpgkey: "{{ nvidia_driver_rhel_epel_repo_gpgkey }}"
    #environment: "{{proxy_env if proxy_env is defined else {}}}"

- name: install epel
  dnf:
    name: epel-release
    state: latest
    update_cache: yes
    enablerepo: true

#
- name: install dependencies
  dnf:
    name: dkms
    enablerepo: "epel"
    state: latest

- name: add repo
  yum_repository:
    name: cuda
    description: NVIDIA CUDA YUM Repo
    baseurl: "{{ nvidia_driver_rhel_cuda_repo_baseurl }}"
    gpgkey: "{{ nvidia_driver_rhel_cuda_repo_gpgkey }}"
    #enabled: true
  environment: "{{proxy_env if proxy_env is defined else {}}}"

#
- name: install nvidia-driver-module
  dnf:
    name: "@nvidia-driver:latest-dkms"
    state: present
    enablerepo: "cuda"
    update_cache: yes

#
#- name: install driver packages
#  dnf:
#    name: "{{ nvidia_driver_package_version | ternary('nvidia-driver-latest-dkms-'+nvidia_driver_package_version, 'nvidia-driver-latest-dkms') }}"
#    state: "{{ nvidia_driver_package_state }}"
#    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
#  register: install_driver
#  environment: "{{proxy_env if proxy_env is defined else {}}}"

# Prime the GPU with p2pbandwidth service
- name: Set selinus permissive
  selinux:
    policy: targeted
    state: permissive
    reboot_required: false

- name: install p2pbandwidth service
  copy:
    src: p2pbandwidth.service
    dest: "/etc/systemd/system/p2pbandwidth.service"
    owner: root
    group: root
    mode: "755"

- name: enable p2pbandwidth service
  systemd:
    state: reloaded
    daemon_reload: true
    enabled: true
    name: p2pbandwidth.service
